{"mappings":"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","sources":["example/materialBall.js","src/materials/PathTracingMaterial.js"],"sourcesContent":["import * as THREE from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PathTracingSceneGenerator, PathTracingRenderer } from '../src/index.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { PathTracingMaterial } from '../src/materials/PathTracingMaterial.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\n\nlet renderer, controls, sceneInfo, ptRenderer, camera, fsQuad, materials;\nlet samplesEl;\nconst params = {\n\n\tmaterial1: {\n\t\tcolor: '#ffffff',\n\t\troughness: 1.0,\n\t\tmetalness: 1.0,\n\t\tior: 1.0,\n\t\ttransmission: 0.0,\n\t\topacity: 1.0,\n\t},\n\tmaterial2: {\n\t\tcolor: '#26C6DA',\n\t\troughness: 1.0,\n\t\tmetalness: 1.0,\n\t\tior: 1.0,\n\t\ttransmission: 0.0,\n\t\topacity: 1.0,\n\t},\n\tenvironmentIntensity: 3,\n\tbounces: 3,\n\tsamplesPerFrame: 1,\n\tacesToneMapping: true,\n\tresolutionScale: 1.0 / window.devicePixelRatio,\n\n};\n\ninit();\n\nasync function init() {\n\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.toneMapping = THREE.ACESFilmicToneMapping;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tfsQuad = new FullScreenQuad( new THREE.MeshBasicMaterial( { transparent: true } ) );\n\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.025, 500 );\n\tcamera.position.set( - 4, 2, 3 );\n\n\tptRenderer = new PathTracingRenderer( renderer );\n\tptRenderer.camera = camera;\n\tptRenderer.material = new PathTracingMaterial( { transparent: true, depthWrite: false } );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\n\tsamplesEl = document.getElementById( 'samples' );\n\n\tconst envMapPromise = new Promise( resolve => {\n\n\t\tnew RGBELoader()\n\t\t\t.load( 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/royal_esplanade_1k.hdr', texture => {\n\n\t\t\t\tconst pmremGenerator = new THREE.PMREMGenerator( renderer );\n\t\t\t\tpmremGenerator.compileCubemapShader();\n\n\t\t\t\tconst envMap = pmremGenerator.fromEquirectangular( texture );\n\n\t\t\t\ttexture.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\tptRenderer.material.environmentMap = envMap.texture;\n\t\t\t\tresolve();\n\n\t\t\t} );\n\n\t} );\n\n\tconst generator = new PathTracingSceneGenerator();\n\tconst gltfPromise = new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/gltf-demo-models/main/material-balls/material-ball.glb' )\n\t\t.then( gltf => {\n\n\t\t\tconst group = new THREE.Group();\n\n\t\t\tgltf.scene.scale.setScalar( 0.01 );\n\t\t\tgltf.scene.updateMatrixWorld();\n\t\t\tgroup.add( gltf.scene );\n\n\t\t\tconst box = new THREE.Box3();\n\t\t\tbox.setFromObject( gltf.scene );\n\n\t\t\tconst floor = new THREE.Mesh(\n\t\t\t\tnew THREE.CylinderBufferGeometry( 3, 3, 0.05, 200 ),\n\t\t\t\tnew THREE.MeshStandardMaterial( { color: 0x1a1a1a } ),\n\t\t\t);\n\t\t\tfloor.geometry = floor.geometry.toNonIndexed();\n\t\t\tfloor.geometry.clearGroups();\n\t\t\tfloor.position.y = box.min.y - 0.025;\n\t\t\tgroup.add( floor );\n\n\t\t\tconst material1 = new THREE.MeshStandardMaterial();\n\t\t\tconst material2 = new THREE.MeshStandardMaterial();\n\n\t\t\tgltf.scene.traverse( c => {\n\n\t\t\t\tif ( c.name === 'Sphere_1' ) {\n\n\t\t\t\t\tc.material = material2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tc.material = material1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( c.name === 'subsphere_1' ) {\n\n\t\t\t\t\tc.visible = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tmaterials = [ material1, material2 ];\n\n\t\t\treturn generator.generate( group );\n\n\t\t} )\n\t\t.then( result => {\n\n\t\t\tsceneInfo = result;\n\t\t\tsceneInfo.scene.add( new THREE.DirectionalLight() );\n\n\t\t\tconst { bvh, textures, materials } = result;\n\t\t\tconst geometry = bvh.geometry;\n\t\t\tconst material = ptRenderer.material;\n\n\t\t\tmaterial.bvh.updateFrom( bvh );\n\t\t\tmaterial.normalAttribute.updateFrom( geometry.attributes.normal );\n\t\t\tmaterial.tangentAttribute.updateFrom( geometry.attributes.tangent );\n\t\t\tmaterial.uvAttribute.updateFrom( geometry.attributes.uv );\n\t\t\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\n\t\t\tmaterial.textures.setTextures( renderer, 2048, 2048, textures );\n\t\t\tmaterial.materials.updateFrom( materials, textures );\n\t\t\tmaterial.setDefine( 'MATERIAL_LENGTH', materials.length );\n\t\t\tptRenderer.reset();\n\n\t\t\tgenerator.dispose();\n\n\t\t} );\n\n\tawait Promise.all( [ gltfPromise, envMapPromise ] );\n\n\tdocument.getElementById( 'loading' ).remove();\n\n\tonResize();\n\twindow.addEventListener( 'resize', onResize );\n\n\tconst gui = new GUI();\n\tconst ptFolder = gui.addFolder( 'Path Tracing' );\n\tptFolder.add( params, 'samplesPerFrame', 1, 10, 1 );\n\tptFolder.add( params, 'environmentIntensity', 0, 10 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tptFolder.add( params, 'bounces', 1, 10, 1 ).onChange( value => {\n\n\t\tptRenderer.material.setDefine( 'BOUNCES', value );\n\t\tptRenderer.reset();\n\n\t} );\n\tptFolder.add( params, 'acesToneMapping' ).onChange( value => {\n\n\t\trenderer.toneMapping = value ? THREE.ACESFilmicToneMapping : THREE.NoToneMapping;\n\t\tfsQuad.material.needsUpdate = true;\n\n\t} );\n\tptFolder.add( params, 'resolutionScale', 0, 1 ).onChange( () => {\n\n\t\tonResize();\n\n\t} );\n\n\tconst matFolder1 = gui.addFolder( 'Material 1' );\n\tmatFolder1.addColor( params.material1, 'color' ).onChange( reset );\n\tmatFolder1.add( params.material1, 'roughness', 0, 1 ).onChange( reset );\n\tmatFolder1.add( params.material1, 'metalness', 0, 1 ).onChange( reset );\n\tmatFolder1.add( params.material1, 'opacity', 0, 1 ).onChange( reset );\n\tmatFolder1.add( params.material1, 'transmission', 0, 1 ).onChange( reset );\n\tmatFolder1.add( params.material1, 'ior', 0.5, 2.0 ).onChange( reset );\n\tmatFolder1.open();\n\n\tconst matFolder2 = gui.addFolder( 'Material 2' );\n\tmatFolder2.addColor( params.material2, 'color' ).onChange( reset );\n\tmatFolder2.add( params.material2, 'roughness', 0, 1 ).onChange( reset );\n\tmatFolder2.add( params.material2, 'metalness', 0, 1 ).onChange( reset );\n\tmatFolder2.add( params.material2, 'opacity', 0, 1 ).onChange( reset );\n\tmatFolder2.add( params.material2, 'transmission', 0, 1 ).onChange( reset );\n\tmatFolder2.add( params.material2, 'ior', 0.5, 2 ).onChange( reset );\n\tmatFolder2.open();\n\n\tanimate();\n\n}\n\nfunction onResize() {\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst scale = params.resolutionScale;\n\tconst dpr = window.devicePixelRatio;\n\n\tptRenderer.target.setSize( w * scale * dpr, h * scale * dpr );\n\tptRenderer.reset();\n\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\tcamera.aspect = w / h;\n\tcamera.updateProjectionMatrix();\n\n}\n\nfunction reset() {\n\n\tptRenderer.reset();\n\n}\n\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\tconst m1 = materials[ 0 ];\n\tm1.color.set( params.material1.color ).convertSRGBToLinear();\n\tm1.metalness = params.material1.metalness;\n\tm1.roughness = params.material1.roughness;\n\tm1.transmission = params.material1.transmission;\n\tm1.ior = params.material1.ior;\n\tm1.opacity = params.material1.opacity;\n\n\tconst m2 = materials[ 1 ];\n\tm2.color.set( params.material2.color ).convertSRGBToLinear();\n\tm2.metalness = params.material2.metalness;\n\tm2.roughness = params.material2.roughness;\n\tm2.transmission = params.material2.transmission;\n\tm2.ior = params.material2.ior;\n\tm2.opacity = params.material2.opacity;\n\n\tptRenderer.material.materials.updateFrom( sceneInfo.materials, sceneInfo.textures );\n\n\tptRenderer.material.environmentIntensity = params.environmentIntensity;\n\tptRenderer.material.environmentBlur = 0.35;\n\n\tcamera.updateMatrixWorld();\n\n\tfor ( let i = 0, l = params.samplesPerFrame; i < l; i ++ ) {\n\n\t\tptRenderer.update();\n\n\t}\n\n\trenderer.autoClear = false;\n\tfsQuad.material.map = ptRenderer.target.texture;\n\tfsQuad.render( renderer );\n\trenderer.autoClear = true;\n\n\tsamplesEl.innerText = `Samples: ${ ptRenderer.samples }`;\n\n}\n\n\n\n\n","import { ShaderMaterial, Matrix4, Color } from 'three';\nimport {\n\tMeshBVHUniformStruct, FloatVertexAttributeTexture, UIntVertexAttributeTexture,\n\tshaderStructs, shaderIntersectFunction,\n} from 'three-mesh-bvh';\nimport { shaderMaterialStructs, pathTracingHelpers } from '../shader/shaderStructs.js';\nimport { MaterialStructArrayUniform } from '../uniforms/MaterialStructArrayUniform.js';\nimport { RenderTarget2DArray } from '../uniforms/RenderTarget2DArray.js';\n\nexport class PathTracingMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tdefines: {\n\t\t\t\tBOUNCES: 3,\n\t\t\t\tMATERIAL_LENGTH: 0,\n\t\t\t\tUSE_ENVMAP: 1,\n\t\t\t\tGRADIENT_BG: 0,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\t\tnormalAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\ttangentAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tuvAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tmaterialIndexAttribute: { value: new UIntVertexAttributeTexture() },\n\t\t\t\tmaterials: { value: new MaterialStructArrayUniform() },\n\t\t\t\ttextures: { value: new RenderTarget2DArray().texture },\n\t\t\t\tcameraWorldMatrix: { value: new Matrix4() },\n\t\t\t\tinvProjectionMatrix: { value: new Matrix4() },\n\t\t\t\tenvironmentBlur: { value: 0.2 },\n\t\t\t\tenvironmentIntensity: { value: 2.0 },\n\t\t\t\tenvironmentMap: { value: null },\n\t\t\t\tseed: { value: 0 },\n\t\t\t\topacity: { value: 1 },\n\n\t\t\t\tgradientTop: { value: new Color( 0xbfd8ff ) },\n\t\t\t\tgradientBottom: { value: new Color( 0xffffff ) },\n\n\t\t\t\tbgGradientTop: { value: new Color( 0x111111 ) },\n\t\t\t\tbgGradientBottom: { value: new Color( 0x000000 ) },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n                varying vec2 vUv;\n                void main() {\n\n                    vec4 mvPosition = vec4( position, 1.0 );\n                    mvPosition = modelViewMatrix * mvPosition;\n                    gl_Position = projectionMatrix * mvPosition;\n\n                    vUv = uv;\n\n                }\n\n            `,\n\n\t\t\tfragmentShader: /* glsl */`\n                #define RAY_OFFSET 1e-5\n\t\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n                precision highp isampler2D;\n                precision highp usampler2D;\n                precision highp sampler2DArray;\n\t\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n                #include <common>\n\t\t\t\t#include <cube_uv_reflection_fragment>\n\n                ${ shaderStructs }\n                ${ shaderIntersectFunction }\n\t\t\t\t${ shaderMaterialStructs }\n\t\t\t\t${ pathTracingHelpers }\n\n\t\t\t\t#if USE_ENVMAP\n\n\t\t\t\tuniform float environmentBlur;\n                uniform sampler2D environmentMap;\n\n\t\t\t\t#else\n\n                uniform vec3 gradientTop;\n                uniform vec3 gradientBottom;\n\n\t\t\t\t#endif\n\n\t\t\t\t#if GRADIENT_BG\n\n\t\t\t\tuniform vec3 bgGradientTop;\n                uniform vec3 bgGradientBottom;\n\n\t\t\t\t#endif\n\n                uniform mat4 cameraWorldMatrix;\n                uniform mat4 invProjectionMatrix;\n                uniform sampler2D normalAttribute;\n                uniform sampler2D tangentAttribute;\n                uniform sampler2D uvAttribute;\n\t\t\t\tuniform usampler2D materialIndexAttribute;\n                uniform BVH bvh;\n                uniform float environmentIntensity;\n                uniform int seed;\n                uniform float opacity;\n\t\t\t\tuniform Material materials[ MATERIAL_LENGTH ];\n\t\t\t\tuniform sampler2DArray textures;\n                varying vec2 vUv;\n\n                void main() {\n\n\t\t\t\t\trng_initialize( gl_FragCoord.xy, seed );\n\n                    // get [-1, 1] normalized device coordinates\n                    vec2 ndc = 2.0 * vUv - vec2( 1.0 );\n                    vec3 rayOrigin, rayDirection;\n                    ndcToCameraRay( ndc, cameraWorldMatrix, invProjectionMatrix, rayOrigin, rayDirection );\n\n                    // Lambertian render\n                    gl_FragColor = vec4( 0.0 );\n\n                    vec3 throughputColor = vec3( 1.0 );\n\n                    // hit results\n                    uvec4 faceIndices = uvec4( 0u );\n                    vec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n                    vec3 barycoord = vec3( 0.0 );\n                    float side = 1.0;\n                    float dist = 0.0;\n\t\t\t\t\tint i;\n                    for ( i = 0; i < BOUNCES; i ++ ) {\n\n                        if ( ! bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\t\t#if GRADIENT_BG\n\n\t\t\t\t\t\t\tif ( i == 0 ) {\n\n\t\t\t\t\t\t\t\trayDirection = normalize( rayDirection );\n\t\t\t\t\t\t\t\tfloat value = ( rayDirection.y + 1.0 ) / 2.0;\n\n\t\t\t\t\t\t\t\tvalue = pow( value, 2.0 );\n\n\t\t\t\t\t\t\t\tgl_FragColor = vec4( mix( bgGradientBottom, bgGradientTop, value ), 1.0 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t#if USE_ENVMAP\n\n                            vec3 skyColor = textureCubeUV( environmentMap, rayDirection, environmentBlur ).rgb;\n\n\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\trayDirection = normalize( rayDirection );\n\t\t\t\t\t\t\tfloat value = ( rayDirection.y + 1.0 ) / 2.0;\n\t\t\t\t\t\t\tvec3 skyColor = mix( gradientBottom, gradientTop, value );\n\n\t\t\t\t\t\t\t#endif\n\n                            gl_FragColor += vec4( skyColor * throughputColor * environmentIntensity, 1.0 );\n\n                            break;\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\tMaterial material = materials[ materialIndex ];\n\n\t\t\t\t\t\tif ( material.opacity < rand() ) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\trayOrigin += rayDirection * dist - faceNormal * RAY_OFFSET;\n\t\t\t\t\t\t\tthroughputColor *= mix( vec3( 1.0 ), material.color, 0.5 * material.opacity );\n\n\t\t\t\t\t\t\ti --;\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n                        // fetch the interpolated smooth normal\n                        vec3 normal = normalize( textureSampleBarycoord(\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz );\n\n\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( uvAttribute, barycoord, faceIndices.xyz ).xy;\n\n\t\t\t\t\t\t// emission\n\t\t\t\t\t\tvec3 emission = material.emissiveIntensity * material.emissive;\n\t\t\t\t\t\tif ( material.emissiveMap != - 1 ) {\n\n\t\t\t\t\t\t\temission *= texture2D( textures, vec3( uv, material.emissiveMap ) ).xyz;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl_FragColor.rgb += throughputColor * emission * max( side, 0.0 );\n\n\t\t\t\t\t\t// 1 / PI attenuation for physically correct lambert model\n                        // https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/\n                        throughputColor *= 1.0 / PI;\n\n\t\t\t\t\t\t// albedo\n\t\t\t\t\t\tthroughputColor *= material.color;\n\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\tthroughputColor *= texture2D( textures, vec3( uv, material.map ) ).xyz;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// normal\n\t\t\t\t\t\tif ( material.normalMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\t\t\t\t\ttangentAttribute,\n\t\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t\t\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\t\t\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\t\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\t\t\t\t\tvec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );\n\t\t\t\t\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t\t\t\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uv, material.normalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\t\t\t\t\ttexNormal.xy *= material.normalScale;\n\t\t\t\t\t\t\t\tnormal = vTBN * texNormal;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnormal *= side;\n\n                        // adjust the hit point by the surface normal by a factor of some offset and the\n                        // maximum component-wise value of the current point to accommodate floating point\n                        // error as values increase.\n                        vec3 point = rayOrigin + rayDirection * dist;\n                        vec3 absPoint = abs( point );\n                        float maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n                        rayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * RAY_OFFSET;\n                        rayDirection = getHemisphereSample( normal, rand2() );\n\n\t\t\t\t\t\t// if the surface normal is skewed such that the outgoing vector can wind up underneath\n\t\t\t\t\t\t// the triangle surface then just consider it absorbed.\n\t\t\t\t\t\tif ( dot( rayDirection, faceNormal ) < 0.0 ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\n                    }\n\n\t\t\t\t\t// gl_FragColor.rgb = mix( gl_FragColor.rgb / 2.0, gl_FragColor.rgb, clamp( float( i ), 0.0, 1.0 ) );\n\t\t\t\t\t// gl_FragColor.rgb = mix( textureCubeUV( environmentMap, rayDirection, 0.0 ).rgb, gl_FragColor.rgb, clamp( float( i ), 0.0, 1.0 ) );\n                    gl_FragColor.a = opacity;\n\n                }\n\n            `\n\n\t\t} );\n\n\t\tfor ( const key in this.uniforms ) {\n\n\t\t\tObject.defineProperty( this, key, {\n\n\t\t\t\tget() {\n\n\t\t\t\t\treturn this.uniforms[ key ].value;\n\n\t\t\t\t},\n\n\t\t\t\tset( v ) {\n\n\t\t\t\t\tthis.uniforms[ key ].value = v;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetDefine( name, value = undefined ) {\n\n\t\tif ( value === undefined || value === null ) {\n\n\t\t\tif ( name in this.defines ) {\n\n\t\t\t\tdelete this.defines[ name ];\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.defines[ name ] !== value ) {\n\n\t\t\t\tthis.defines[ name ] = value;\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n"],"names":["$ilwiq","parcelRequire","$42be2d938991924d$export$357223536b51a4a3","ShaderMaterial","constructor","parameters","super","defines","BOUNCES","MATERIAL_LENGTH","USE_ENVMAP","GRADIENT_BG","uniforms","bvh","value","$8Zfx2","MeshBVHUniformStruct","normalAttribute","FloatVertexAttributeTexture","tangentAttribute","uvAttribute","materialIndexAttribute","UIntVertexAttributeTexture","materials","$dJ2FF","MaterialStructArrayUniform","textures","$12pjC","RenderTarget2DArray","texture","cameraWorldMatrix","Matrix4","invProjectionMatrix","environmentBlur","environmentIntensity","environmentMap","seed","opacity","gradientTop","Color","gradientBottom","bgGradientTop","bgGradientBottom","vertexShader","fragmentShader","shaderStructs","shaderIntersectFunction","$5Wq6T","shaderMaterialStructs","pathTracingHelpers","key","this","Object","defineProperty","get","set","v","setValues","setDefine","name","needsUpdate","$0473c5c83fd2a77a$var$renderer","$0473c5c83fd2a77a$var$controls","$0473c5c83fd2a77a$var$sceneInfo","$0473c5c83fd2a77a$var$ptRenderer","$0473c5c83fd2a77a$var$camera","$0473c5c83fd2a77a$var$fsQuad","$0473c5c83fd2a77a$var$materials","$0473c5c83fd2a77a$var$samplesEl","$0473c5c83fd2a77a$var$params","material1","color","roughness","metalness","ior","transmission","material2","bounces","samplesPerFrame","acesToneMapping","resolutionScale","window","devicePixelRatio","$0473c5c83fd2a77a$var$onResize","w","innerWidth","h","innerHeight","scale","dpr","target","setSize","reset","setPixelRatio","aspect","updateProjectionMatrix","$0473c5c83fd2a77a$var$reset","$0473c5c83fd2a77a$var$animate","requestAnimationFrame","m1","convertSRGBToLinear","m2","material","updateFrom","updateMatrixWorld","i","l","update","autoClear","map","render","innerText","samples","async","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","document","body","appendChild","domElement","$RPVlj","FullScreenQuad","MeshBasicMaterial","transparent","PerspectiveCamera","position","$4CEV9","PathTracingRenderer","camera","depthWrite","$5Rd1x","OrbitControls","addEventListener","getElementById","envMapPromise","Promise","resolve","$891vQ","RGBELoader","load","pmremGenerator","PMREMGenerator","compileCubemapShader","envMap","fromEquirectangular","mapping","EquirectangularReflectionMapping","generator","PathTracingSceneGenerator","gltfPromise","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","then","gltf","group","Group","scene","setScalar","add","box","Box3","setFromObject","floor","Mesh","CylinderBufferGeometry","MeshStandardMaterial","geometry","toNonIndexed","clearGroups","y","min","traverse","c","visible","generate","result","DirectionalLight","attributes","normal","tangent","uv","materialIndex","setTextures","length","dispose","all","remove","gui","$jiuw3","GUI","ptFolder","addFolder","onChange","NoToneMapping","matFolder1","addColor","open","matFolder2","$0473c5c83fd2a77a$var$init"],"version":3,"file":"materialBall.2d30a0c5.js.map"}